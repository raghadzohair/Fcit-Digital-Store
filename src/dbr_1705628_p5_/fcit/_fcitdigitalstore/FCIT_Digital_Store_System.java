/*
 * Raghad zohair ID: 1705628 seciton: DBR
 * Email: Ryahya0010@stu.edu.kau.sa
 * program 5: FcitDigitalStore
 */
package dbr_1705628_p5_.fcit._fcitdigitalstore;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Raghad
 */
public class FCIT_Digital_Store_System extends javax.swing.JFrame {
   static ArrayList<Customer> customersList;
   static ArrayList<Item> digitalItems;
   static String command;

    

    /**
     * Creates new form NewJFrame
     */
    public FCIT_Digital_Store_System() {
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        clearButton2 = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        searchButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 2, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to FCIT Digital Store System");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Customer ID:");

        clearButton2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        clearButton2.setText("Clear");
        clearButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButton2ActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Customer Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Rewarded Point:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        searchButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        searchButton1.setText("Search");
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(77, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel2)
                                .addGap(31, 31, 31)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(clearButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(43, 43, 43))
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        // TODO add your handling code here:
        if (jTextField1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter a customer ID !", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else {
            boolean isFound = false;
            int index = 0;
            int toNum = Integer.parseInt(jTextField1.getText());
            for (int i = 0; i < customersList.size(); i++) {
                if (toNum==(customersList.get(i).getID())){
                    isFound = true;
                    index = i;                                  
                }
            }
            if(isFound){
                jTextField2.setText(customersList.get(index).getfullName());
                jTextField3.setText(customersList.get(index).getRewardPoints() + "");                            
            }
            else
                JOptionPane.showMessageDialog(null, "Not Found !", "Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void clearButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButton2ActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
    }//GEN-LAST:event_clearButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[])throws FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FCIT_Digital_Store_System.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FCIT_Digital_Store_System.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FCIT_Digital_Store_System.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FCIT_Digital_Store_System.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FCIT_Digital_Store_System().setVisible(true);
            }
        });
        File inputFile = new File("input.txt");
        if(!inputFile.exists()){
            System.out.println("The File Does Not Exist!!!!!");
            System.exit(0);
        }
        
        Scanner input = new Scanner(inputFile);
        File comandOutPut = new File("Output.txt");
        PrintWriter output =new PrintWriter(comandOutPut);
        File tranOutPut = new File("All Transaction.txt");
        PrintWriter output2 = new PrintWriter(tranOutPut);
        customersList = new ArrayList<>();
        digitalItems = new ArrayList<>();

        while(input.hasNext()){
             command = input.next();
            if (command.equalsIgnoreCase("Add_Customer")) { 
                Customer c = new Customer(input.next(), input.next(), input.nextInt(), input.nextInt(), input.nextInt());
                customersList.add(c);
                print(output,command);
                output.println(c.toString());
                output.println("---------------------------------------------------------------------");
            }
            else if(command.equalsIgnoreCase("Add_Movie")){
                Movie m = new Movie(input.next(),input.nextDouble());
                digitalItems.add(m);
                print(output,command);
                output.println(m.toString());
                output.println("---------------------------------------------------------------------");
            }
            else if(command.equalsIgnoreCase("Add_Documentary")){
                Documentary d = new Documentary(input.next(),input.nextDouble());
                digitalItems.add(d);
                print(output,command);
                output.println(d.toString());
                output.println("---------------------------------------------------------------------");
            }
            else if(command.equalsIgnoreCase("Add_Series")){
                Series s = new Series(input.next(),input.nextDouble(),input.nextInt());
                digitalItems.add(s);
                print(output,command);
                output.println(s.toString());
                output.println("---------------------------------------------------------------------");
            }
            else if(command.equalsIgnoreCase("Order_Movie")){
                orderMovie(input, output);
            }
            else if(command.equalsIgnoreCase("Order_Documentary")){
                orderDocumantry(input,output);
  
            }
            else if (command.equalsIgnoreCase("Order_Series")){
                orderSeries(input, output);              
            }
            else if(command.equalsIgnoreCase("Print_Transactions")){
                printAllTran(output2);
            }
            else if(command.equalsIgnoreCase("END")){
                output.print("Thanks for using FCIT Digital System..");
            }
        }
        input.close();
        output.close();
        output2.close();
    }
    ////////////////////////////////////////////////////////////////////
    public static void print(PrintWriter output,String command){
        output.println("******** COMMAND: "+command.toUpperCase()+" ********");
    }
    ////////////////////////////////////////////////////////////////////
    public static void orderMovie(Scanner input, PrintWriter output){
        int idTran = input.nextInt();
        String name = input.next();
        int idcus = input.nextInt();
        boolean item =  false;
        boolean customer = false;
        int indexItem = 0;
        int indexCus = 0;
        for (int i = 0; i < digitalItems.size(); i++) {
            if (name.equalsIgnoreCase(digitalItems.get(i).getName())) {
                indexItem = i;
                item =  true;
                for (int j = 0; j < customersList.size(); j++) {
                    if (idcus == customersList.get(j).getID()) {
                        indexCus = j;
                        customer = true;
                    }
                }
            }
        }        
        Transaction tran = new Transaction(idTran, digitalItems.get(indexItem), customersList.get(indexCus));
        tran.newPoint();
        try {
            if (item && customer) {
                customersList.get(indexCus).addTransaction(tran, digitalItems.get(indexItem));
                print(output, command);
                output.println(customersList.get(indexCus).toString() + tran.toString());
                output.println("---------------------------------------------------------------------");
            }
        }  
        catch (UnderAgeException x) { 
            print(output, command);
            output.println(x.getMessage());
        }       
    }
    ///////////////////////////////////////////////////////////////////
    public static void orderDocumantry(Scanner input, PrintWriter output){
        int idTran = input.nextInt();
        String name = input.next();
        int idcus = input.nextInt();
        boolean item =  false;
        boolean customer = false;
        int indexItem = 0;
        int indexCus = 0;
        for (int i = 0; i < digitalItems.size(); i++) {
            if (name.equalsIgnoreCase(digitalItems.get(i).getName())) {
                indexItem = i;
                item =  true;
                for (int j = 0; j < customersList.size(); j++) {
                    if (idcus == customersList.get(j).getID()) {
                        indexCus = j;
                        customer = true;
                    }                   
                }
            }
        }        
        Transaction tran = new Transaction(idTran, digitalItems.get(indexItem), customersList.get(indexCus));
        tran.newPoint();
        try {
            if (item && customer) {
                customersList.get(indexCus).addTransaction(tran, digitalItems.get(indexItem));
                print(output, command);
                output.println(customersList.get(indexCus).toString() + tran.toString());
                output.println("---------------------------------------------------------------------");
            }
        } 
        catch (UnderAgeException x) {
            print(output, command);
            output.println(x.getMessage());
        }        
    }
    ///////////////////////////////////////////////////////////////////
    public static void orderSeries(Scanner input, PrintWriter output){
        int idTran = input.nextInt();
        String name = input.next();
        int idcus = input.nextInt();
        int season = input.nextInt();
        boolean item =  false;
        boolean customer = false;
        int indexItem = 0;
        int indexCus = 0;
        for (int i = 0; i < digitalItems.size(); i++) {
            if (name.equalsIgnoreCase(digitalItems.get(i).getName())) {
                indexItem = i;
                item =  true;
                for (int j = 0; j < customersList.size(); j++) {
                    if (idcus == customersList.get(j).getID()) {
                        indexCus = j;
                        customer = true;
                    }
                }
            }
        }

        Transaction tran = new Transaction(idTran, digitalItems.get(indexItem), customersList.get(indexCus));  
        tran.newPoint();
        try {
            if (item && customer) {
                customersList.get(indexCus).addTransaction(tran, digitalItems.get(indexItem));
                print(output, command);
                output.println(customersList.get(indexCus).toString() + tran.toString());
                output.println("---------------------------------------------------------------------");
            }
        } 
        catch (UnderAgeException x) {
            print(output, command);
            output.println(x.getMessage());
        }
        
        
        
    }
    //////////////////////////////////////////////////////////////////
    public static void printAllTran(PrintWriter output2){
        output2.println("******** COMMAND: PRINT_TRANSACTIONS ********");
        Collections.sort(customersList);

        for (int i = 0; i < customersList.size(); i++) {
            output2.println("######################################################################");
            output2.println(customersList.get(i).toString() + customersList.get(i).printTransaction());
        }
        output2.println("---------------------------------------------------------------------");
    }
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton2;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton searchButton1;
    // End of variables declaration//GEN-END:variables
}
